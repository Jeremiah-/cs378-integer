==27100== Memcheck, a memory error detector
==27100== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==27100== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==27100== Command: ./TestInteger
==27100== 
Running main() from gtest_main.cc
[==========] Running 18 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 18 tests from IntegerFixture
[ RUN      ] IntegerFixture.shift_left1
==27100== Invalid read of size 4
==27100==    at 0x41558B: testing::AssertionResult testing::internal::CmpHelperEQ<int, int>(char const*, char const*, int const&, int const&) (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x4141E7: testing::AssertionResult testing::internal::EqHelper<false>::Compare<int, int>(char const*, char const*, int const&, int const&) (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x404C12: IntegerFixture_shift_left1_Test::TestBody() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x43B222: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42DC3C: testing::Test::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42DCD3: testing::TestInfo::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42DDD4: testing::TestCase::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42E04C: testing::internal::UnitTestImpl::RunAllTests() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42E32D: testing::UnitTest::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x40495F: main (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==27100== 
==27100== 
==27100== Process terminating with default action of signal 11 (SIGSEGV)
==27100==  Access not within mapped region at address 0x0
==27100==    at 0x41558B: testing::AssertionResult testing::internal::CmpHelperEQ<int, int>(char const*, char const*, int const&, int const&) (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x4141E7: testing::AssertionResult testing::internal::EqHelper<false>::Compare<int, int>(char const*, char const*, int const&, int const&) (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x404C12: IntegerFixture_shift_left1_Test::TestBody() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x43B222: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42DC3C: testing::Test::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42DCD3: testing::TestInfo::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42DDD4: testing::TestCase::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42E04C: testing::internal::UnitTestImpl::RunAllTests() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x42E32D: testing::UnitTest::Run() (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==    by 0x40495F: main (in /v/filer4b/v38q001/jeremiah/Documents/cs378-integer/TestInteger)
==27100==  If you believe this happened as a result of a stack
==27100==  overflow in your program's main thread (unlikely but
==27100==  possible), you can try to increase the size of the
==27100==  main thread stack using the --main-stacksize= flag.
==27100==  The main thread stack size used in this run was 16777216.
==27100== 
==27100== HEAP SUMMARY:
==27100==     in use at exit: 6,400 bytes in 94 blocks
==27100==   total heap usage: 342 allocs, 248 frees, 46,186 bytes allocated
==27100== 
==27100== LEAK SUMMARY:
==27100==    definitely lost: 0 bytes in 0 blocks
==27100==    indirectly lost: 0 bytes in 0 blocks
==27100==      possibly lost: 1,696 bytes in 43 blocks
==27100==    still reachable: 4,704 bytes in 51 blocks
==27100==         suppressed: 0 bytes in 0 blocks
==27100== Rerun with --leak-check=full to see details of leaked memory
==27100== 
==27100== For counts of detected and suppressed errors, rerun with: -v
==27100== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
